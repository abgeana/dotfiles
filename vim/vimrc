" we are using vim, not vi
set nocompatible

" enable syntax highlighting
syntax on
filetype plugin on
syntax enable

" automatically cd into the directory that the file is in
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

" remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" restore cursor position to where it was before
augroup JumpCursorOnEdit
   au!
   autocmd BufReadPost *
            \   if expand("<afile>:p:h") !=? $TEMP |
            \       if line("'\"") > 1 && line("'\"") <= line("$") |
            \           let JumpCursorOnEdit_foo = line("'\"") |
            \           let b:doopenfold = 1 |
            \           if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
            \               let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
            \               let b:doopenfold = 2 |
            \           endif |
            \           exe JumpCursorOnEdit_foo |
            \       endif |
            \   endif
   " need to postpone using "zv" until after reading the modelines
   autocmd BufWinEnter *
            \   if exists("b:doopenfold") |
            \       exe "normal zv" |
            \       if(b:doopenfold > 1) |
            \           exe  "+".1 |
            \       endif |
            \       unlet b:doopenfold |
            \   endif
augroup END

" tabs and spaces
set expandtab       " insert space chars whenever TAB is pressed
set tabstop=4       " control the number of space chars inserted when TAB is pressed
set shiftwidth=4    " the number of space characters inserted for indentation
set softtabstop=4   " stop at multiple of 4 when pressing TAB key
retab               " when opening a file, convert tab chars to spaces

" autoindentation
set autoindent
set smartindent

" to disable autoindentation and autocommenting press F7, to enable it back press F8
:nnoremap <F7> :setl formatoptions-=c formatoptions-=r formatoptions-=o noai nocin nosi inde=<CR>
:nnoremap <F8> :setl formatoptions+=c formatoptions+=r formatoptions+=o ai cin si inde=    <CR>

" searching
set incsearch               " incremental search
set ignorecase              " search ignoring case
set hlsearch                " highlight the search
set showmatch               " show matching bracket
set diffopt=filler,iwhite   " ignore all whitespace and sync
:nnoremap <F3> :setl hlsearch!<CR>

" show line numbers
set number

" shows what you are typing as a command
set showcmd

" when a tab is clossed, remove the buffer
set nohidden

" 256 colors
set t_Co=256

" set the colorscheme
colorscheme darkblue

" remember more undos
set undolevels=1000

" we have a fast terminal
set ttyfast

" no bells
set noerrorbells

" enter command mode with ; instead of :
nore ; :

" copy all text from the file
:nnoremap <F2> :%y+<CR>

" cursor moves as expected with wrapped lines
map <silent> k gk
map <silent> j gj
map <silent> <home> g<home>
imap <silent> <home> <C-o>g<home>
map <silent> <End> g<End>
imap <silent> <End> <C-o>g<End>

" break the arrow keys habbit once and for all...
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" fancy tabline
set tabline=%!MyTabLine()  " custom tab pages line
function MyTabLine()
        let s = '' " complete tabline goes here
        " loop through each tab page
        for t in range(tabpagenr('$'))
                " set highlight
                if t + 1 == tabpagenr()
                        let s .= '%#TabLineSel#'
                else
                        let s .= '%#TabLine#'
                endif
                " set the tab page number (for mouse clicks)
                let s .= '%' . (t + 1) . 'T'
                let s .= ' '
                " set page number string
                let s .= t + 1 . ' '
                " get buffer names and statuses
                let n = ''      "temp string for buffer names while we loop and check buftype
                let m = 0       " &modified counter
                let bc = len(tabpagebuflist(t + 1))     "counter to avoid last ' '
                " loop through each buffer in a tab
                for b in tabpagebuflist(t + 1)
                        " buffer types: quickfix gets a [Q], help gets [H]{base fname}
                        " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
                        if getbufvar( b, "&buftype" ) == 'help'
                                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
                        elseif getbufvar( b, "&buftype" ) == 'quickfix'
                                let n .= '[Q]'
                        else
                                let n .= pathshorten(bufname(b))
                        endif
                        " check and ++ tab's &modified count
                        if getbufvar( b, "&modified" )
                                let m += 1
                        endif
                        " no final ' ' added...formatting looks better done later
                        if bc > 1
                                let n .= ' '
                        endif
                        let bc -= 1
                endfor
                " add modified label [n+] where n pages in tab are modified
                if m > 0
                        let s .= '[' . m . '+]'
                endif
                " select the highlighting for the buffer names
                " my default highlighting only underlines the active tab
                " buffer names.
                if t + 1 == tabpagenr()
                        let s .= '%#TabLineSel#'
                else
                        let s .= '%#TabLine#'
                endif
                " add buffer names
                if n == ''
                        let s.= '[New]'
                else
                        let s .= n
                endif
                " switch to no underlining and add final space to buffer list
                let s .= ' '
        endfor
        " after the last tab fill with TabLineFill and reset tab page nr
        let s .= '%#TabLineFill#%T'
        " right-align the label to close the current tab page
        if tabpagenr('$') > 1
                let s .= '%=%#TabLineFill#%999Xclose'
        endif
        return s
endfunction

" allow buffers with changes to be hidden
" http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden

" backspace behaviour
" http://vim.wikia.com/wiki/Erasing_previously_entered_characters_in_insert_mode
set backspace=indent,eol,start

" tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

" enable syntax highlighting
filetype plugin on
filetype indent off
syntax enable

" automatically cd into the directory that the file is in
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

" remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" escape sequences for urxvt/mintty
" these can be obtained with cat
" also ontopic is http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim
" do not just type, instead enter Insert mode and type Ctrl-v followed by key stroke
let uname = system('uname -a')
if uname =~# '.*Linux.*'
    set <F1>=[11~
    set <F2>=[12~
    set <F3>=[13~
    set <F4>=[14~
    set <F5>=[15~
    set <F6>=[17~
    set <F7>=[18~
    set <F8>=[19~
    set <F9>=[20~
    set <F10>=[21~
    set <F11>=[23~
    set <F12>=[24~
elseif uname =~# '.*Cygwin.*'
    set <F1>=OP
    set <F2>=OQ
    set <F3>=OR
    set <F4>=OS
    set <F5>=[15~
    set <F6>=[17~
    set <F7>=[18~
    set <F8>=[19~
    set <F9>=[20~
    set <F10>=[21~
    set <F11>=[23~
    set <F12>=[24~
endif

" tabs and spaces
set expandtab       " insert space chars whenever TAB is pressed
set tabstop=4       " control the number of space chars inserted when TAB is pressed
set shiftwidth=4    " the number of space characters inserted for indentation
set softtabstop=4   " stop at multiple of 4 when pressing TAB key
retab               " when opening a file, convert tab chars to spaces

" autoindentation
set autoindent
set smartindent
set nocindent

" searching
set incsearch               " incremental search
set ignorecase              " search ignoring case
set hlsearch                " highlight the search
set showmatch               " show matching bracket
set diffopt=filler,iwhite   " ignore all whitespace and sync

" F1 to highlight occurences of word under cursor and F2 to disable highlighting
map <F1> :setl hlsearch<CR>#*
map <F2> :setl hlsearch!<CR>

" to disable autoindentation and autocommenting press F3, to enable it back press F4
map <F3> :set formatoptions-=cro nocindent noautoindent nosmartindent inde=<CR>
map <F4> :set formatoptions+=cro nocindent autoindent smartindent inde=    <CR>

" show line numbers
set number

" shows what you are typing as a command
set showcmd

" 256 colors
set t_Co=256

" set the colorscheme
colorscheme darkblue

" remember more undos
set undolevels=1000

" no bells
set noerrorbells

" enter command mode with ; instead of :
nore ; :

" cursor moves as expected with wrapped lines
map <silent> k gk
map <silent> j gj
map <silent> <home> g<home>
imap <silent> <home> <C-o>g<home>
map <silent> <End> g<End>
imap <silent> <End> <C-o>g<End>

" break the arrow keys habbit once and for all...
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" restore cursor position to where it was before
" this requires the viminfo config above
function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

" prevent various Vim features from keeping the contents of pass(1) password
" files (or any other purely temporary files) in plaintext on the system
" author: Tom Ryder <tom@sanctum.geek.nz>
" taken from http://git.zx2c4.com/password-store/tree/contrib/vim/noplaintext.vim

" don't backup files in temp directories or shm
if exists('&backupskip')
    set backupskip+=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
endif

" don't keep swap files in temp directories or shm
if has('autocmd')
    augroup swapskip
        autocmd!
        silent! autocmd BufNewFile,BufReadPre
            \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
            \ setlocal noswapfile
    augroup END
endif

" don't keep undo files in temp directories or shm
if has('persistent_undo') && has('autocmd')
    augroup undoskip
        autocmd!
        silent! autocmd BufWritePre
            \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
            \ setlocal noundofile
    augroup END
endif

" don't keep viminfo for files in temp directories or shm
if has('viminfo')
    if has('autocmd')
        augroup viminfoskip
            autocmd!
            silent! autocmd BufNewFile,BufReadPre
                \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
                \ setlocal viminfo=
        augroup END
    endif
endif

" configs for external tools
" pathogen.vim
"execute pathogen#infect()

" clang format
map <C-K> :pyf /usr/share/vim/addons/syntax/clang-format-3.7.py<CR>
imap <C-K> <c-o>:pyf/usr/share/vim/addons/syntax/clang-format-3.7.py<CR>

" regular vim specific configs
if !has('nvim')
    " NERDTree
    let NERDTreeMinimalUI=1
    map <C-n> :NERDTreeToggle<CR>

    " we have a fast terminal
    set ttyfast
endif

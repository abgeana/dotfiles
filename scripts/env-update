#! env python

from __future__ import print_function
import sys, os, requests
from colored import fg, attr
from os.path import join as j

class File(object):

    def __init__(self, remote, local):
        self.remote = remote
        self.local = local

class Config(object):

    _base_url = 'https://raw.githubusercontent.com/alegen/alegen-configs/master/'

    def __init__(self, program, folder, *files):
        self.description = program
        self.folder = folder
        self.files = files

    def update(self):
        print('Updating %s...' % self.description)
        for f in self.files:
            print('%-30s ' % f.local, end = '')
            if self._download_file(f.local, f.remote):
                print('%s[  OK  ]%s' % (fg('green'), attr('reset')))
            else:
                print('%s[ FAIL ]%s'% (fg('red'), attr('reset')))
        print()

    def _download_file(self, local, remote):
        if self.folder is not None:
            remote_url = Config._base_url + self.folder + '/' + remote
        else:
            remote_url = Config._base_url + '/' + remote

        response = requests.get(remote_url)
        try:
            if response.status_code == 200:
                with open(local, 'w') as f:
                    f.write( response.text.encode('utf-8') )
                    return True
            else:
                return False
        except IOError:
            return False

def main():
    home = os.getenv('HOME')
    configs = {}
    update_list = []

    configs['self'] = Config('update script', 'scripts',
        File('env-update', j('/bin', 'env-update'))
    )

    configs['scripts'] = Config('all scripts', 'scripts',
        File('env-update',  j('/bin', 'env-update')),
        File('cbtype',      j('/bin', 'cbtype')),
        File('chkb',        j('/bin', 'chkb')),
        File('todo',        j('/bin', 'todo')),
        File('todo-ssh',    j('/bin', 'todo-ssh')),
        File('todo.conf',   j(home,   '.todo.conf')),
    )

    configs['tmux'] = Config('tmux multiplexer', 'tmux',
        File('tmux.conf',       j(home,   '.tmux.conf')),
        File('tmux.conf.ssh',   j(home,   '.tmux.conf.ssh')),
        File('tmux.common',     j(home,   '.tmux.common')),
        File('ssh-tmux',        j('/bin', 'ssh-tmux'))
    )

    configs['vim'] = Config('vim editor', 'vim',
        File('vimrc', j(home, '.vimrc'))
    )

    configs['shell'] = Config('zsh shell', 'shell',
        File('inputrc',             j(home, '.inputrc')),
        File('ipython_config.py',   j(home, '.ipython', 'profile_default', 'ipython_config.py'))
        File('zshrc',               j(home, '.zshrc')),
        File('dircolors',           j(home, '.dircolors'))
    )

    configs['i3wm'] = Config('i3 status bar', 'i3wm',
        File('i3status.conf',   j(home, '.i3status.conf')),
        File('config',          j(home, '.i3', 'config')),
        File('i3wrapper.py',    j(home, '.i3', 'i3wrapper.py')),
        File('net_ip.py',       j(home, '.i3', 'net_ip.py'))
    )

    configs['irssi'] = Config('irssi IRC client', 'irssi',
        File('reddress.theme', j(home, '.irssi', 'reddress.theme'))
    )

    configs['x11'] = Config('X11', 'X11',
        File('Xresources', j(home, '.Xresources'))
    )

    configs['gpg'] = Config('GnuPG', 'gnupg',
        File('gpg-agent.conf',  j(home, '.gnupg', 'gpg-agent.conf')),
        File('gpg.conf',        j(home, '.gnupg', 'gpg.conf'))
    )

    configs['reveng'] = Config('reverse engineering', 'reveng',
        File('radare2rc', j(home, '.radare2rc'))
    )

    if len(sys.argv) > 1:
        for idx in range( 1, len(sys.argv) ):
            update_list.append(sys.argv[idx])
        update_list = set(update_list)

        for item in update_list:
            if item in configs:
                configs[item].update()
    else:
        print("Usage: env-update [ list of configs ]")
        print("Known configs:")
        for key, val in configs.items():
            print( "\t%s\t - %s" % (key, val.description) )

if __name__ == '__main__':
    main()

#! env zsh

set -o pipefail

# manipulate the command line arguments
ARGS=("$@")

# load the config file
if [[ -f ~/.todo.conf ]]; then
    source ~/.todo.conf
    # this config file may contain
    # TODO_DIR which is the directory for keeping tasks
    # GIT_USER the username used by ssh for git purposes
    # GIT_KEY the ssh key for git purposes
    # this script uses only TODO_DIR
fi

# load defaults for options missing in .todo.conf
if [[ -z $TODO_DIR ]]; then
    TODO_DIR=~/todos
fi

# function for loading all tasks
function load_tasks() {
    local idx=1
    while read -r line; do
        if ! [[ $line =~ '.*total.*' || $line =~ '.*\.git.*' ]]; then
            TASKS[$idx]=$(echo $line | awk '
                BEGIN {
                    FS = " "
                }
                {
                    l = ""
                    for (i = 9; i <= NF; i++) {
                        l = l $i
                        if (i != NF)
                            l = l " "
                    }
                    print l
                }
            ')
            ((idx=idx+1))
        fi
    done <<< "$(ls -Alr $TODO_DIR)"
}

# function to print all tasks on the screen
function list_tasks() {
    echo 'Your standing list of tasks is:'
    for ((i=1; i<=$#TASKS; i++ )) do
        echo $i | awk '{
            printf "%3i)\t", $0
        }'
        echo $TASKS[$i]
    done
}

# function to add new task
function add_task() {
    # ask for user input regarding the new task
    echo "Adding new task to $TODO_DIR"
    vared -p '    Insert task name: '       -c tkname
    vared -p '    Insert task priority: '   -c tkprio

    # format the input data and create a new title for the task file
    tkprio=$(awk -v tkprio=$tkprio 'BEGIN {
        printf "%03d", tkprio
    }')
    tkdate=$(date +%F)
    tktitle="$tkprio $tkdate $tkname"

    # start vim for editing the task file
    vim -c 'startinsert' "$TODO_DIR/$tktitle"

    if [[ -s "$TODO_DIR/$tktitle" ]]; then
        echo 'Task saved'
    else
        echo 'Task not saved'
    fi
}

# function for opening a task file in vim
function view_task() {
    vared -p 'Task to view: ' -c tkidx
    if [[ $tkidx -le $#TASKS ]]; then
        vim "$TODO_DIR/$TASKS[$tkidx]"
    else
        echo 'That task does not exist'
    fi
}

# fucntion for removing a task file
function remove_task() {
    vared -p 'Task to remove: ' -c tkidx
    if [[ $tkidx -le $#TASKS ]]; then
        rm "$TODO_DIR/$TASKS[$tkidx]"
        if [[ $? == 0 ]]; then
            echo 'Task removed'
        else
            echo 'Task could not be removed'
        fi
    else
        echo 'That task does not exist'
    fi
}

# functions which run git commands
function git_pull() {
    eval $GIT_CMD pull &> /dev/null
    echo 'Updated tasks from git repository'
}

function git_add_commit_push() {
    eval $GIT_CMD add -A &> /dev/null
    eval $GIT_CMD commit -m \"commit $(date '+%Y-%m-%d %H:%M:%S')\" &> /dev/null
    eval $GIT_CMD push &> /dev/null
    echo 'Saved tasks to git repository'
}

# some general initialization
GIT_CMD="$(which git) --git-dir=$TODO_DIR/.git --work-tree=$TODO_DIR"
export GIT_SSH="$(readlink -f ${0%/*})/todo-ssh"

TASKS=()
load_tasks

if [[ ! -d $TODO_DIR ]]; then
    mkdir "$TODO_DIR" &> /dev/null
    if [[ $? != 0 ]]; then
        echo "Could not read or create directory for tasks in $TODO_DIR"
    else
        eval $GIT_CMD init &> /dev/null
    fi
else
    eval $GIT_CMD rev-parse &> /dev/null
    if [[ $? -ne 0 ]]; then
        eval $GIT_CMD init &> /dev/null
    fi
fi

# script logic
if [[ $#ARGS == 0 ]]; then
    list_tasks
else
    for arg in $ARGS; do
        case $arg in
            '-l')
                list_tasks
                ;;
            '-a' | '-n')
                add_task
                ;;
            '-v')
                view_task
                ;;
            '-r')
                remove_task
                ;;
            '-gp' | '-gu')
                git_pull
                ;;
            '-gc' | '-gs')
                git_add_commit_push
                ;;
            *)
                echo "Unknown argument $arg"
        esac;
    done;
fi

#! env zsh

set -o pipefail

# manipulate the command line arguments
ARGS=("$@")

# load the config file or use sane defaults
if [[ -f ~/.todo.conf ]]; then
    source ~/.todo.conf
else
    TODO_DIR=~/todos
fi

# some general validation
if [[ ! -d $TODO_DIR ]]; then
    mkdir "$TODO_DIR"
    if [[ $? != 0 ]]; then
        echo "Could not read or create directory for tasks in $TODO_DIR"
    fi
fi

# function for loading all tasks
function load_tasks() {
    local idx=0
    while read -r line; do
        if [[ $idx > 0 ]]; then
            TASKS[$idx]=$(echo $line | awk '
                BEGIN {
                    FS = " "
                }
                {
                    l = ""
                    for (i = 9; i <= NF; i++) {
                        l = l $i
                        if (i != NF)
                            l = l " "
                    }
                    print l
                }
            ')
        fi
        ((idx=idx+1))
    done <<< "$(ls -Alr $TODO_DIR)"
}

# initialize TASKS
TASKS=()
load_tasks

# print all tasks on the screen
function list_tasks() {
    echo 'Your standing list of tasks is:'
    for ((i=1; i<=$#TASKS; i++ )) do
        echo $i | awk '{
            printf "%3i)\t", $0
        }'
        echo $TASKS[$i]
    done
}

function add_task() {
    # ask for user input regarding the new task
    echo "Adding new task to $TODO_DIR"
    vared -p '    Insert task name: '       -c tkname
    vared -p '    Insert task priority: '   -c tkprio

    # format the input data and create a new title for the task file
    tkprio=$(awk -v tkprio=$tkprio 'BEGIN {
        printf "%03d", tkprio
    }')
    tkdate=$(date +%F)
    tktitle="$tkprio $tkdate $tkname"

    # start vim for editing the task file
    vim -c 'startinsert' "$TODO_DIR/$tktitle"

    if [[ -s "$TODO_DIR/$tktitle" ]]; then
        echo 'Task saved'
    else
        echo 'Task not saved'
    fi
}

# function for opening a task file in vim
function view_task() {
    vared -p 'Task to view: ' -c tkidx
    if [[ $tkidx -le $#TASKS ]]; then
        vim "$TODO_DIR/$TASKS[$tkidx]"
    else
        echo 'That task does not exist'
    fi
}

# fucntion for removing a task file
function remove_task() {
    vared -p 'Task to remove: ' -c tkidx
    if [[ $tkidx -le $#TASKS ]]; then
        rm "$TODO_DIR/$TASKS[$tkidx]"
        if [[ $? == 0 ]]; then
            echo 'Task removed'
        else
            echo 'Task could not be removed'
        fi
    else
        echo 'That task does not exist'
    fi
}

if [[ $#ARGS == 0 ]]; then
    list_tasks
else
    for arg in $ARGS; do
        case $arg in
            '-l')
                list_tasks
                ;;
            '-a' | '-n')
                add_task
                ;;
            '-v')
                view_task
                ;;
            '-r')
                remove_task
                ;;
            *)
                echo "Unknown argument $arg"
        esac;
    done;
fi

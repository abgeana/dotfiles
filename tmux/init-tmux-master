#! env python3

import argparse
import yaml
import os.path
import subprocess
from collections import namedtuple

TmuxSession_field_names = ["index", "name", "windows"]
TmuxWindow_field_names = ["index", "name", "commands"]
TmuxSession = namedtuple("TmuxSession", TmuxSession_field_names)
TmuxWindow = namedtuple("TmuxWindow", TmuxWindow_field_names)


class CommandRunner:
    """CommandRunner implements the functionality for executing commands with specified arguments. Furthermore it
    performs string formatting using python3 format strings and tokens."""

    def __init__(self, *cmd_prefix):
        self.args = dict()
        self._cmd_prefix = cmd_prefix

    def _process_cmd(self, *raw_cmd):
        """_process_cmd performs the formatting of command tokens based on values stored in the self.args member. The
        command prefix specified as arguments in the constructor are also prepended."""
        full_cmd = self._cmd_prefix + raw_cmd
        processed_cmd = list()
        for token in full_cmd:
            processed_cmd.append(token.format(**self.args))
        return processed_cmd

    def _run_cmd(self, *cmd):
        """run executes the command (and associated arguments) given as function arguments. The expected format is one
        function argument for the command, and each of the command arguments."""
        cp = subprocess.run(cmd, stdout=subprocess.PIPE)
        return cp.stdout.decode('utf-8')

    def run(self, *raw_cmd):
        """run executes the specified command. String formatting using the self.args member is performed before
        executing the command. The command prefix specified in the constructor is prepended to the command before
        execution."""
        processed_cmd = self._process_cmd(*raw_cmd)
        return self._run_cmd(*processed_cmd).strip()


def load_config():
    """load_config parses the configuration file describing tmux sessions and returns a list of TmuxSession objects."""
    user = CommandRunner().run('whoami')
    config_path = '/home/{user}/.tmux.master.yml'.format(user=user)

    with open(config_path, 'r') as config_handle:
        sessions_yaml = yaml.load(config_handle, Loader=yaml.FullLoader)

    # load secondary config files
    for key in sessions_yaml.keys():
        if type(sessions_yaml[key]) == str:
            config_path = os.path.expanduser(sessions_yaml[key])
            with open(config_path, 'r') as config_handle:
                sessions_yaml[key] = yaml.load(config_handle, Loader=yaml.FullLoader)

    sessions = list()
    for idx_session, (session_name, session_windows) in enumerate(sessions_yaml.items()):
        windows = list()
        for idx_window, window in enumerate(session_windows):
            if type(window) == str:
                window_name = window
                window_commands = None
            else:
                window_name = window['name']
                window_commands = window['commands']
            windows.append(TmuxWindow(index=idx_window + 1, name=window_name, commands=window_commands))
        sessions.append(TmuxSession(index=idx_session + 1, name=session_name, windows=windows))

    return sessions


def init_window(tr, window):
    tr.args['window_name'] = window.name
    tr.args['window_idx'] = window.index
    tr.args['target'] = '{session_name}:{window_idx}'.format(**tr.args)

    if window.index == 1:
        tr.run('rename-window', '-t', '{target}', '{window_name}')
    else:
        tr.run('new-window', '-t', '{target}', '-n', '{window_name}')

    # switch to the current window
    tr.run('select-window', '-t', '{target}')
    # unset TMUX to run slave tmux sessions
    tr.run('send-keys', '-t', '{target}', 'unset TMUX', 'Enter')
    # 'type' the clear command
    tr.run('send-keys', '-t', '{target}', 'clear', 'Enter')

    if window.commands:
        for command in window.commands:
            tr.args['command'] = command
            tr.run('send-keys', '-t', '{target}', '{command}', 'Enter')


def init_session(tr, session):
    tr.args['session_name'] = session.name

    if session.index == 1:
        tr.run('rename-session', '{session_name}')
    else:
        tr.run('new-session', '-d', '-s', '{session_name}')
        tr.run('switch-client', '-t', '{session_name}')

    for window in session.windows:
        init_window(tr, window)


def main():
    tr = CommandRunner('tmux', '-L', 'master')
    for session in load_config():
        init_session(tr, session)


if __name__ == '__main__':
    main()

#! /usr/bin/python

from __future__ import print_function

import os
import ConfigParser, argparse, requests, subprocess

from os.path import expanduser as exp
from colored import fg, attr

def parse_args():
    parser = argparse.ArgumentParser(description = 'Update environment configuration files.')
    parser.add_argument('-c', '--config', nargs = 1, help = 'configuration file for this update utility')
    parser.add_argument('-ls', '--list', nargs = '*', help = 'show all configuration sections supported for update')
    parser.add_argument('-u', '--update', nargs = '*', help = 'configuration files to be updated')
    parser.add_argument('-ln', '--link', action = 'store_true', help = 'create links from repository clone')
    parser.add_argument('-r', '--repo-dir', nargs = 1, help = 'location of repository clone')
    args = parser.parse_args()
    return args

def parse_configs(f):
    cfg = ConfigParser.ConfigParser()
    # next line is needed in order to make option names case-sensitive
    # https://stackoverflow.com/questions/1611799
    cfg.optionxform = str
    with open(f, 'r') as fp:
        cfg.readfp(fp)
    return cfg

def listing(cfg, l):
    print('Configuration sections available for update:')
    if len(l) == 0:
        for s in cfg.sections():
            if s != 'config':
                out = '    %s%s%s' % (fg('blue'), s, attr('reset'))
                if cfg.has_option(s, 'desc'):
                    out = out.ljust(40) + '%s%s%s' % (fg('cyan'), cfg.get(s, 'desc'), attr('reset'))
                print(out)
    else:
        for s in l:
            if s != 'config':
                print( '%s%s%s' % (fg('blue'), s, attr('reset')) )
                for o in cfg.options(s):
                    if o == 'desc':
                        continue
                    v = cfg.get(s, o)
                    if ';' in v:
                        v = v[:v.find(';')]
                    out = '    %s%s%s' % (fg('cyan'), o, attr('reset'))
                    out = out.ljust(50)
                    out += '%s%s%s' % (fg('green'), exp(v), attr('reset'))
                    print(out)

def chmod(f, mod):
    subprocess.call( ('chmod %s %s' % (mod, f)).split(' ') )

def chown(f):
    subprocess.call( ('chown root:root %s' % f ).split(' ') )

def update(cfg, sections):
    if len(sections) == 0:
        sections = cfg.sections()
    base_url = cfg.get('config', 'base_url')

    print('Updating...')
    for s in sections:
        if s != 'config':
            print( '%s%s%s' % (fg('blue'), s, attr('reset')) )
            url = base_url + '/' + s + '/' if s != 'root' else base_url + '/'
            for o in cfg.options(s):
                if o == 'desc':
                    continue

                v = cfg.get(s, o)
                if v.count(';') > 0:
                    tok = v.split(';')
                    dir_chmod = tok[2] if len(tok) == 3 else int(cfg.get('config', 'dir_chmod'), 8)
                    file_chmod = tok[1]
                    v = tok[0]
                else:
                    dir_chmod = int(cfg.get('config', 'dir_chmod'), 8)
                    file_chmod = cfg.get('config', 'file_chmod')

                response = requests.get(url + o)
                ok = False

                try:
                    if response.status_code == 200:
                        f = exp(v)
                        try:
                            os.makedirs( os.path.dirname(f), mode = dir_chmod )
                        except OSError:
                            pass
                        with open(f, 'w') as fp:
                            fp.write( response.text.encode('utf-8') )
                        chmod(f, file_chmod)
                        if os.geteuid() == 0:
                            chown(f)
                        ok = True
                except IOError:
                    pass

                out = v
                out = '%s%s%s' % (fg('cyan'), out, attr('reset'))
                if ok:
                    out = ('%s[  OK  ]%s  ' % (fg('green'), attr('reset'))) + out
                else:
                    out = ('%s[ FAIL ]%s  ' % (fg('red'), attr('reset'))) + out
                out = '   ' + out
                print(out)

def link(src, dst):
    pass

def main():
    args = parse_args()

    if args.config is None:
        cfg = parse_configs('/etc/env-update.cfg')
    else:
        cfg = parse_configs(args.config[0])

    if args.list is not None:
        listing(cfg, args.list)

    if args.update is not None:
        update(cfg, args.update)

if __name__ == '__main__':
    main()

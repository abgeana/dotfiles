#! env python3

import argparse
import base64
import getpass
import hashlib
import io
import json
import os
import shutil
import stat
import platform
from dataclasses import dataclass
from os.path import exists, expanduser
from typing import Dict, Optional

import colorama
import requests
from colorama import Fore, Style
from dataclass_wizard import YAMLWizard


def ct(color, text):
    """ct uses the colorama library to set the terminal color for the specified text."""
    return f'{color}{text}{colorama.Style.RESET_ALL}'


def pct(color, text, end="\n"):
    """pct prints the provided text with the specified color."""
    print(ct(color, text), end=end)


def parse_args():
    """parse_args parses the supported command line arguments."""
    parser = argparse.ArgumentParser(description='Update environment configuration files.')
    parser.add_argument('-c', '--config', type=str, default=None, help='configuration file for this update utility')

    subparsers = parser.add_subparsers(dest="command")

    parser_update = subparsers.add_parser("update")
    parser_update.add_argument('groups', nargs=argparse.REMAINDER, help='configuration groups to be updated')

    parser_diff = subparsers.add_parser("diff")
    parser_diff.add_argument('-v', '--verbose', action='store_true', help='print verbose diff output')
    parser_diff.add_argument('groups', nargs=argparse.REMAINDER, help='configuration groups to be updated')

    args = parser.parse_args()
    return args


def download_file(path_repo):
    """download_file gets the contents of a file from github. It pretty much scrapes the raw view."""
    git_branch = 'master'
    if platform.system() == 'Darwin':
        git_branch = 'macos'

    try:
        response = requests.get(f'https://raw.githubusercontent.com/abgeana/dotfiles/{git_branch}/{path_repo}')
    except IOError:
        pass

    if response.status_code == 200:
        return response.text, True

    return None, False


@dataclass
class ConfigDefaults:
    file_perms: int
    dir_perms: int
    sections: list[str]


@dataclass
class ConfigGroup:
    description: str
    files: dict[str, dict[str, str] | str] = None
    dependencies: list[str] = None
    clear: str = None


@dataclass
class Config(YAMLWizard):
    defaults: ConfigDefaults
    groups: dict[str, ConfigGroup]

    @staticmethod
    def load():
        """load gets the contents of the yaml config file hosted on github."""
        try:
            response = requests.get(
                "https://raw.githubusercontent.com/abgeana/dotfiles/master/env-update/env-update.yml")
        except IOError:
            raise RuntimeError("could not load configuration file")

        if response.status_code != 200:
            raise RuntimeError("could not load configuration file")

        return Config.from_yaml(response.text)


class Updater:
    """Updater implements the functionality to perform updates of dot files."""

    def __init__(self, cfg):
        self._cfg = cfg

    def do_update(self, groups):
        """do_update updates dot files based on the groups specified in the update subcommand."""
        if groups is None or len(groups) == 0:
            groups = self._cfg.defaults.sections
        groups = self._expand_dependencies(groups)
        for group_name in groups:
            self._update_group(group_name)

    def _expand_dependencies(self, groups):
        finished = False
        while not finished:
            pre_len = len(groups)

            for group_name in groups:
                if group_name not in self._cfg.groups.keys():
                    continue
                group = self._cfg.groups[group_name]
                if group.dependencies is None:
                    continue
                for d in group.dependencies:
                    if d not in self._cfg.groups.keys():
                        pct(Fore.RED, f'dependency \"{d}\" does not exist')
                        continue
                    if d not in groups:
                        groups.append(d)

            post_len = len(groups)
            finished = pre_len == post_len

        return groups

    def _update_group(self, group_name):
        """_update_group updates all the files for the specified group in the configuration file."""
        if group_name not in self._cfg.groups.keys():
            pct(Fore.RED, f'group {group_name} does not exist')
            return
        else:
            group = self._cfg.groups[group_name]
            pct(Fore.BLUE, f'updating {group_name}: {group.description}')

        if group.files is None:
            return

        if group.clear:
            try:
                shutil.rmtree(expanduser(group.clear))
            except FileNotFoundError:
                pass

        for path_repo, val in group.files.items():
            if type(val) == str:
                # the value is the path on disk
                path_disk = val
                file_perms = self._cfg.defaults.file_perms
            elif type(val) == dict:
                # the value is a dict with keys "path" and "perms"
                path_disk = val["path"]
                file_perms = val["perms"]

            content, is_ok = download_file(f"{path_repo}")
            if is_ok:
                is_ok = self._write_file(path_disk, content, self._cfg.defaults.dir_perms, file_perms)

            self._print_update_status(is_ok, path_disk)

    def _write_file(self, path_disk, content, dir_perms, file_perms):
        """_write_file creates or updates a file with the specified content. It also sets the file mode bits, and the
        owner to root if the process is running as root."""
        full_path = expanduser(path_disk)

        try:
            os.makedirs(os.path.dirname(full_path), mode=dir_perms)
        except OSError:
            pass

        try:
            with open(full_path, 'w') as fp:
                fp.write(content)
        except PermissionError:
            return False

        os.chmod(full_path, file_perms)
        if os.geteuid() == 0:
            os.chown(full_path, 0, 0)

        return True

    def _print_update_status(self, is_ok, path_disk):
        """_print_update_status displays the status of a file download operation."""
        status, status_color = ('[✔]', Fore.GREEN) if is_ok else ('[✘]', Fore.RED)
        pct(status_color, f"  {status}  ", end="")
        pct(Fore.CYAN, path_disk)


class Differ:

    DIFF_DOWNLOAD_FAILED = 1
    DIFF_MISMATCH = 2
    DIFF_MATCH = 3

    def __init__(self, cfg):
        self._cfg = cfg

    def do_diff(self, groups, verbose):
        if groups is None or len(groups) == 0:
            # if no groups are given, we check all of them
            groups = self._cfg.groups.keys()
        for g in groups:
            self._diff_group(g, verbose)

    def _diff_group(self, group_name, verbose):
        if group_name not in self._cfg.groups.keys():
            pct(Fore.RED, f'group {group_name} does not exist')
            return
        group = self._cfg.groups[group_name]
        pct(Fore.BLUE, f'diffing {group_name}: {group.description}')
        for path_repo, val in group.files.items():
            if type(val) == str:
                path_disk = val
            else:
                path_disk = val["path"]
            if not exists(expanduser(path_disk)):
                continue

            contents, is_ok = download_file(path_repo)
            if is_ok == False:
                self._print_match_status(path_disk, Differ.DIFF_DOWNLOAD_FAILED)
                continue

            match_result = self._check_match(path_disk, contents)
            self._print_match_status(path_disk, match_result)

    def _check_match(self, path_disk, contents):
        with open(expanduser(path_disk), 'rb') as f:
            local_contents = f.read()
        md5_local = hashlib.md5(local_contents).hexdigest()
        md5_repo = hashlib.md5(contents.encode("utf-8")).hexdigest()
        if md5_local == md5_repo:
            return Differ.DIFF_MATCH
        else:
            return Differ.DIFF_MISMATCH

    def _print_match_status(self, path_disk, match_result):
        if match_result != Differ.DIFF_MATCH:
            status = '[✘]'
        else:
            status = '[✔]'
        if match_result == Differ.DIFF_MATCH:
            status_color = Fore.GREEN
        elif match_result == Differ.DIFF_MISMATCH:
            status_color = Fore.YELLOW
        else:
            status_color = Fore.RED
        pct(status_color, f"  {status}  ", end="")
        pct(Fore.CYAN, path_disk)


def main():
    colorama.init()

    args = parse_args()

    if args.config is not None:
        try:
            with io.open(args.config, "r", encoding="utf-8") as f:
                cfg = Config.from_yaml(f.read())
        except FileNotFoundError:
            pct(Fore.RED, "Could not load local yaml config file!")
            exit(1)
    else:
        try:
            cfg = Config.load()
        except RuntimeError:
            pct(Fore.RED, "Could not load yaml config file from github!")
            exit(1)

    if args.command == "update":
        updater = Updater(cfg)
        updater.do_update(args.groups)
    elif args.command == "diff":
        differ = Differ(cfg)
        differ.do_diff(args.groups, args.verbose)


if __name__ == '__main__':
    main()

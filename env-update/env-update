#! env python3

import argparse
import base64
import configparser
import getpass
import json
import os
import shutil
import stat
from os.path import expanduser

import colorama
import requests
from colorama import Fore, Style


def parse_args():
    """parse_args parses the supported command line arguments."""
    parser = argparse.ArgumentParser(description='Update environment configuration files.')
    parser.add_argument('-c',
                        '--config',
                        type=str,
                        default='/etc/env-update.cfg',
                        help='configuration file for this update utility')
    parser.add_argument('-l', '--list', nargs='*', help='show all configuration sections supported for update')
    parser.add_argument('-u', '--update', nargs='*', help='configuration files to be updated')
    args = parser.parse_args()
    return args


def parse_config(f):
    """parse_config loads the configuration file for the script."""
    cfg = configparser.ConfigParser()
    # next line is needed in order to make option names case-sensitive
    # https://stackoverflow.com/questions/1611799
    cfg.optionxform = str
    with open(f, 'r') as fp:
        cfg.read_file(fp)
    return cfg


class Updater:
    """Updater implements the functionality to perform updates of dot files."""

    def __init__(self, cfg):
        self._cfg = cfg

    def do_list(self, sections):
        """do_list prints contents of the configuration file based on the -l/--list argument."""
        if len(sections) == 0:
            self._list_all_sections()
        else:
            for section in sections:
                self._list_section(section)

    def _get_csv(self, section, option):
        """_get_csv loads an option with comma separated values from the specified section."""
        ret = list()
        for i in self._cfg.get(section, option).split(','):
            if len(i) > 0:
                ret.append(i.strip())
        return ret

    def do_update(self, sections):
        """do_update updates dot files based on the -u/--update argument."""
        if sections is None or len(sections) == 0:
            sections = self._get_csv('config', 'default-sections')
        for section in sections:
            self._update_section(section)

    def _parse_config_value(self, value):
        """_parse_config_value splits a configuration value into tokens."""
        tokens = value.split(';')

        path = tokens[0]

        if len(tokens) == 1:
            file_chmod = self._cfg.get('config', 'file_chmod')
            dir_chmod = int(self._cfg.get('config', 'dir_chmod'), 8)
        else:
            file_chmod = tokens[1]

        if len(tokens) == 3:
            dir_chmod = tokens[2]
        else:
            dir_chmod = int(self._cfg.get('config', 'dir_chmod'), 8)

        return path, dir_chmod, file_chmod

    def _color_text(self, color, text):
        """_color_text uses the colorama library to set the terminal color for the specified text."""
        return f'{color}{text}{colorama.Style.RESET_ALL}'

    def _list_all_sections(self):
        """_list_all_sections prints all the sections from the configuration file."""
        for section in self._cfg.sections():
            if section == 'config':
                continue

            colored_section = self._color_text(Fore.BLUE, section)
            print(f'{colored_section:<30}', end='')

            if self._cfg.has_option(section, 'desc'):
                desc = self._cfg.get(section, 'desc')
                colored_desc = self._color_text(Fore.CYAN, desc)
                print(colored_desc, end='')

            print()

    def _list_section(self, section):
        """_list_section prints the content of one section from the configuration file, except for the config
        section."""
        if section == 'config':
            return

        if section not in self._cfg.sections():
            print(self._color_text(Fore.RED, f'section {section} does not exist'))
            return

        print(self._color_text(Fore.BLUE, section))
        for option in self._cfg.options(section):
            if option == 'desc':
                continue

            value = self._cfg.get(section, option)
            path, _, _, = self._parse_config_value(value)
            colored_path = self._color_text(Fore.GREEN, path)
            colored_option = self._color_text(Fore.CYAN, option)

            print(f'    {colored_option:<40}{colored_path}')

    def _print_update_status(self, is_ok, value):
        """_print_update_status displays the status of a file download operation."""
        path, _, _ = self._parse_config_value(value)
        colored_path = self._color_text(Fore.CYAN, path)

        status, status_color = ('[✔]', Fore.GREEN) if is_ok else ('[✘]', Fore.RED)
        colored_status = self._color_text(status_color, status)

        print(f'  {colored_status}  {colored_path}')

    def _clear_directories(self, dirs):
        """_clear_directories removes the content of every directory in the list given as argument."""
        for d in dirs:
            try:
                shutil.rmtree(expanduser(d))
            except FileNotFoundError:
                pass

    def _update_section(self, section):
        """_update_section updates all the files for the specified section in the configuration file."""
        if section == 'config':
            return

        if section not in self._cfg.sections():
            print(self._color_text(Fore.RED, f'section {section} does not exist'))
            return
        else:
            print(self._color_text(Fore.BLUE, f'updating {section}'))

        for option in self._cfg.options(section):
            if option == 'desc':
                continue
            elif option == 'clear':
                dirs = self._get_csv(section, 'clear')
                self._clear_directories(dirs)
            else:
                self._update_file(section, option)

    def _update_file(self, section, option):
        """_update_file updates the specified file from the specified section."""
        value = self._cfg.get(section, option)
        content, is_ok = self._download_file(section, option)

        if is_ok:
            is_ok = self._write_file(value, content)

        self._print_update_status(is_ok, value)

    def _download_file(self, section, option):
        """_download_file gets the contents of a file from github. It pretty much scrapes the raw view."""
        url = 'https://raw.githubusercontent.com/abgeana/dotfiles/master/{directory:s}/{file:s}'
        try:
            response = requests.get(url.format(directory=section, file=option))
        except IOError:
            pass

        if response.status_code == 200:
            return response.text, True

        return None, False

    def _write_file(self, value, content):
        """_write_file creates or updates a file with the specified content. It also sets the file mode bits, and the
        owner to root if the process is running as root."""
        path, dir_chmod, file_chmod = self._parse_config_value(value)
        full_path = expanduser(path)

        try:
            os.makedirs(os.path.dirname(full_path), mode=dir_chmod)
            os.chmod(os.path.dirname(full_path), 0o700)
        except OSError:
            pass

        try:
            with open(full_path, 'w') as fp:
                fp.write(content)
        except PermissionError:
            return False

        os.chmod(full_path, int(file_chmod, 8))
        if os.geteuid() == 0:
            os.chown(full_path, 0, 0)

        return True


def main():
    colorama.init()

    args = parse_args()
    cfg = parse_config(args.config)
    updater = Updater(cfg)

    if args.list is not None:
        updater.do_list(args.list)

    updater.do_update(args.update)


if __name__ == '__main__':
    main()
